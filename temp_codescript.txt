src/App.js:

// App.js

import "./App.css";
import React, { useState, useEffect } from "react";
import ResumeForm from "./components/ResumeForm";
import ResumePreview from "./components/ResumePreview";

function App() {
  const [isScrolling, setIsScrolling] = useState(false);

  const handleScroll = () => {
    if (window.scrollY > 0) {
      setIsScrolling(true);
    } else {
      setIsScrolling(false);
    }
  };

  const [resumeData, setResumeData] = useState({
    personalInfo: {
      fullName: "",
      email: "",
      phoneNumber: "",
      location: "",
    },
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handleDataChange = (newData) => {
    setResumeData((prevData) => ({
      ...prevData,
      experience: newData,
    }));
  };
  

  useEffect(() => {
    const storedData = localStorage.getItem("resumeData");
    if (storedData) {
      setResumeData(JSON.parse(storedData));
    }
  }, []);

  useEffect(() => {
    const savedPersonalInfo = localStorage.getItem("personalInfo");
    if (savedPersonalInfo) {
      setResumeData((prevData) => ({
        ...prevData,
        personalInfo: JSON.parse(savedPersonalInfo),
      }));
    }
  }, []);

  useEffect(() => {
    const savedExperience = localStorage.getItem("experience");
    if (savedExperience) {
      setResumeData((prevData) => ({
        ...prevData,
        experience: JSON.parse(savedExperience),
      }));
    }
  }, []);

  useEffect(() => {
    const savedEducation = localStorage.getItem("education");
    if (savedEducation) {
      setResumeData((prevData) => ({
        ...prevData,
        education: JSON.parse(savedEducation),
      }));
    }
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <div className={`App ${isScrolling ? "scrolling" : ""}`}>
      {/* Barra fija con clase "visible" cuando se está haciendo scroll */}
      <div className={`fixed-bar ${isScrolling ? "visible" : ""}`}></div>

      <header className="App-header">
        <h1>Online CV Maker</h1>
      </header>

      <div className="app-container">
        <div className="form-panel">
          <div className="title-bar">
            <p>Edit</p>
          </div>

          <div className="content">
            <ResumeForm onDataChange={handleDataChange} />
          </div>
        </div>

        <div className="preview-panel">
          <div className="title-bar">
            <p>View</p>
          </div>

          <div className="content">
            <ResumePreview data={resumeData} />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;

----------------------------------------

src/components/ResumeForm.jsx:

// components/ResumeForm.js

import React, { useState } from "react";

import PersonalInfoForm from "./PersonalInfoForm";
import ExperienceForm from "./ExperienceForm";
import EducationForm from "./EducationForm";
import SkillsForm from "./SkillsForm";
import ProjectsForm from "./ProjectsForm";
import CertificatesForm from "./CertificatesForm";
import LanguagesForm from "./LanguagesForm";

const ResumeForm = ({ onDataChange }) => {
  const [resumeData, setResumeData] = useState({
    personalInfo: {},
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handlePersonalInfoUpdate = (newPersonalInfo) => {
    setResumeData({ ...resumeData, personalInfo: newPersonalInfo });
    onDataChange({ ...resumeData, personalInfo: newPersonalInfo });
  };

  const handleExperienceUpdate = (newExperience) => {
    setResumeData((prevData) => ({
      ...prevData,
      experience: newExperience,
    }));
    onDataChange((prevData) => ({
      ...prevData,
      experience: newExperience,
    }));
  };
  
  const handleEducationUpdate = (newEducation) => {
    setResumeData({ ...resumeData, education: newEducation });
    onDataChange({ ...resumeData, education: newEducation });
  };

  const handleSkillsUpdate = (newSkills) => {
    setResumeData({ ...resumeData, skills: newSkills });
    onDataChange({ ...resumeData, skills: newSkills });
  };

  const handleProjectsUpdate = (newProjects) => {
    setResumeData({ ...resumeData, projects: newProjects });
    onDataChange({ ...resumeData, projects: newProjects });
  };

  const handleCertificatesUpdate = (newCertificates) => {
    setResumeData({ ...resumeData, certificates: newCertificates });
    onDataChange({ ...resumeData, certificates: newCertificates });
  };

  const handleLanguagesUpdate = (newLanguages) => {
    setResumeData({ ...resumeData, languages: newLanguages });
    onDataChange({ ...resumeData, languages: newLanguages });
  };

  return (
    <div className="Labels">
      <PersonalInfoForm onUpdate={handlePersonalInfoUpdate} />
      <ExperienceForm onUpdate={handleExperienceUpdate} />
      <EducationForm onUpdate={handleEducationUpdate} />
      <SkillsForm onUpdate={handleSkillsUpdate} />
      <ProjectsForm onUpdate={handleProjectsUpdate} />
      <CertificatesForm onUpdate={handleCertificatesUpdate} />
      <LanguagesForm onUpdate={handleLanguagesUpdate} />
    </div>
  );
};

export default ResumeForm;

----------------------------------------

src/components/ResumePreview.jsx:

// components/ResumePreview.jsx

import React from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faEnvelope,
  faPhone,
  faMapMarker,
} from "@fortawesome/free-solid-svg-icons";

const ResumePreview = ({ data }) => {
  return (
    <div className="resume-container">
      <div className="header">
        <h1>{data.personalInfo?.fullName}</h1>
        <div className="sub-info">
          <FontAwesomeIcon icon={faEnvelope} className="text-gray-600 mr-1" />
          <p>{data.personalInfo?.email}</p>
          <span className="separator">|</span>
          <FontAwesomeIcon icon={faPhone} className="text-gray-600 mx-1" />
          <p>{data.personalInfo?.phoneNumber}</p>
          <span className="separator">|</span>
          {data.personalInfo?.location && (
            <>
              <FontAwesomeIcon
                icon={faMapMarker}
                className="text-gray-600 mx-1"
              />
              <p>{data.personalInfo.location}</p>
            </>
          )}
        </div>
      </div>
      {/* <hr />  */}
      <br></br>
      {Array.isArray(data.experience) && data.experience.length > 0 && (
      <div className="section">
        <h3>Experience</h3>
        <ul>
        {data.experience.map((exp, index) => (
            <li key={index}>
              <div className="experience-item">
                <div className="experience-header">
                  <p className="company">{exp.company}</p>
                  <p>
                    {exp.startDate} - {exp.endDate}
                  </p>
                </div>
                <p className="role">{exp.role}</p>
                {exp.description && (
                  <p className="description-bullet">{exp.description}</p>
                )}
              </div>
            </li>
          ))}
        </ul>
      </div>
)}

      <div className="section">
        <h3>Education</h3>
      </div>

      <div className="section">
        <h3>Skills</h3>
      </div>

      <div className="section">
        <h3>Projects</h3>
      </div>

      <div className="section">
        <h3>Certificates</h3>
      </div>

      <div className="section">
        <h3>Languages</h3>
      </div>
    </div>
  );
};

export default ResumePreview;

----------------------------------------

src/components/ExperienceForm.jsx:

// components/ExperienceForm.jsx

import React, { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faChevronDown,
  faChevronUp,
  faPlus,
  faTrash,
  faSave,
} from "@fortawesome/free-solid-svg-icons";

const ExperienceForm = ({ onUpdate }) => {
  const [experience, setExperience] = useState([
    {
      company: "",
      role: "",
      startDate: "",
      endDate: "",
      descriptions: [""], // Inicialmente, se agrega una descripción vacía
    },
  ]);
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  // const [deletedExperienceIndex, setDeletedExperienceIndex] = useState(null);

  useEffect(() => {
    const savedExperience = localStorage.getItem("experience");
    if (savedExperience) {
      setExperience(JSON.parse(savedExperience));
    }
  }, []);

  const toggleFormVisibility = () => {
    setIsFormVisible(!isFormVisible);
  };

  const handleChange = (event, index) => {
    const { name, value } = event.target;
    const updatedExperiences = [...experience];
    updatedExperiences[index] = { ...updatedExperiences[index], [name]: value };
    setExperience(updatedExperiences);
    onUpdate(updatedExperiences);
    setHasChanges(true);
  };

  const handleAddExperience = () => {
    const newExperiences = [...experience, {
      company: "", 
      role: "", 
      startDate: "", 
      endDate: "", 
      descriptions: [""] 

    }];
    setExperience(newExperiences);
    onUpdate(newExperiences);
  };
  
  const handleDelete = (index) => {
    let updatedExperiences;
    if (experience.length > 1) {
      updatedExperiences = [...experience];
      updatedExperiences.splice(index, 1);
    } else {
      updatedExperiences = [
        {
          company: "",
          role: "",
          startDate: "",
          endDate: "",
          descriptions: [""],
        },
      ];
    }

    setExperience(updatedExperiences);
    onUpdate(updatedExperiences);
    localStorage.setItem("experience", JSON.stringify(updatedExperiences));
  };
  

  // const handleAddNewExperience = () => {
  //   if (experience.length === 1 && experience[0].company === "") {
  //     // Los campos ya están listos para una nueva experiencia
  //     return;
  //   }
  //   setExperience([
  //     ...experience,
  //     { company: "", role: "", startDate: "", endDate: "", descriptions: [""] },
  //   ]);
  // };

  const handleSave = () => {
    localStorage.setItem("experience", JSON.stringify(experience));
    setHasChanges(false);
  };

  return (
    <div>
      <div
        className={`title-button ${isFormVisible ? "expanded" : ""}`}
        onClick={toggleFormVisibility}
      >
        <h2>Experience</h2>
        <FontAwesomeIcon icon={isFormVisible ? faChevronUp : faChevronDown} />
      </div>
      {isFormVisible && (
        <div className="form-container">
          <form>
            {experience.map((exp, index) => (
              <div key={index}>
                <div className="form-field">
                  <label>Company Name:</label>
                  <input
                    type="text"
                    name="company"
                    value={exp.company}
                    onChange={(e) => handleChange(e, index)}
                  />
                </div>
                <div className="form-field">
                  <label>Role:</label>
                  <input
                    type="text"
                    name="role"
                    value={exp.role}
                    onChange={(e) => handleChange(e, index)}
                  />
                </div>
                <div className="form-field">
                  <label>Start Date:</label>
                  <input
                    type="date"
                    name="startDate"
                    value={exp.startDate}
                    onChange={(e) => handleChange(e, index)}
                  />
                </div>
                <div className="form-field">
                  <label>End Date:</label>
                  <input
                    type="date"
                    name="endDate"
                    value={exp.endDate}
                    onChange={(e) => handleChange(e, index)}
                  />
                </div>
                <div className="form-field">
                  <label>Description:</label>
                  <div className="textarea-container">
                    <textarea
                      name="description"
                      value={exp.description}
                      onChange={(e) => handleChange(e, index)}
                    />
                  </div>
                </div>
                <div className="button-container">
                <button type="button" onClick={handleAddExperience}>
                      <FontAwesomeIcon icon={faPlus} /> New
                    </button>
                  {/* {(index === experience.length - 1 ||
                    experience.length === 1) && (
                  
                  )} */}
                  {/* {experience.length > 1 && ( */}
                  <button
                    type="button"
                    onClick={() => handleDelete(index)}
                    className="delete-button"
                  >
                    <FontAwesomeIcon icon={faTrash} /> Delete
                  </button>
                  {/* )} */}
                  <button
                    type="button"
                    onClick={handleSave}
                    disabled={!hasChanges}
                    className={hasChanges ? "" : "saved-button"}
                  >
                    {hasChanges ? (
                      <>
                        <FontAwesomeIcon icon={faSave} /> Save
                      </>
                    ) : (
                      "Saved"
                    )}
                  </button>
                </div>
              </div>
            ))}
          </form>
        </div>
      )}
    </div>
  );
};

export default ExperienceForm;

----------------------------------------

