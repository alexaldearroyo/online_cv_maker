App.js:

// App.js

import "./App.css";
import React, { useState, useEffect } from "react";
import ResumeForm from "./components/ResumeForm";
import ResumePreview from "./components/ResumePreview";

function App() {
  const [isScrolling, setIsScrolling] = useState(false);

  const handleScroll = () => {
    if (window.scrollY > 0) {
      setIsScrolling(true);
    } else {
      setIsScrolling(false);
    }
  };

  const [resumeData, setResumeData] = useState({
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handleDataChange = (newData) => {
    setResumeData(newData);
  };

  useEffect(() => {
    const storedData = localStorage.getItem("resumeData");
    if (storedData) {
      setResumeData(JSON.parse(storedData));
    }
  }, []);

  useEffect(() => {
    const savedPersonalInfo = localStorage.getItem("personalInfo");
    if (savedPersonalInfo) {
      setResumeData((prevData) => ({
        ...prevData,
        personalInfo: JSON.parse(savedPersonalInfo),
      }));
    }
  }, []);

  useEffect(() => {
    const savedExperience = localStorage.getItem("experience");
    if (savedExperience) {
      setResumeData((prevData) => ({
        ...prevData,
        experience: JSON.parse(savedExperience),
      }));
    }
  }, []);

  useEffect(() => {
    const savedEducation = localStorage.getItem("education");
    if (savedEducation) {
      setResumeData((prevData) => ({
        ...prevData,
        education: JSON.parse(savedEducation),
      }));
    }
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <div className={`App ${isScrolling ? "scrolling" : ""}`}>
      {/* Barra fija con clase "visible" cuando se est√° haciendo scroll */}
      <div className={`fixed-bar ${isScrolling ? "visible" : ""}`}></div>

      <header className="App-header">
        <h1>Online CV Maker</h1>
      </header>

      <div className="app-container">
        <div className="form-panel">
          <div className="title-bar">
            <p>Edit</p>
          </div>

          <div className="content">
            <ResumeForm onDataChange={handleDataChange} />
          </div>
        </div>

        <div className="preview-panel">
          <div className="title-bar">
            <p>View</p>
          </div>

          <div className="content">
            <ResumePreview data={resumeData} />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;

----------------------------------------

components/ResumeForm.jsx:

// components/ResumeForm.js

import React, { useState } from "react";

import PersonalInfoForm from "./PersonalInfoForm";
import ExperienceForm from "./ExperienceForm";
import EducationForm from "./EducationForm";
import SkillsForm from "./SkillsForm";
import ProjectsForm from "./ProjectsForm";
import CertificatesForm from "./CertificatesForm";
import LanguagesForm from "./LanguagesForm";

const ResumeForm = ({ onDataChange }) => {
  const [resumeData, setResumeData] = useState({
    personalInfo: {},
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handlePersonalInfoUpdate = (newPersonalInfo) => {
    setResumeData({ ...resumeData, personalInfo: newPersonalInfo });
    onDataChange({ ...resumeData, personalInfo: newPersonalInfo });
  };

  const handleExperienceUpdate = (newExperience) => {
    setResumeData({ ...resumeData, experience: newExperience });
    onDataChange({ ...resumeData, experience: newExperience });
  };

  const handleEducationUpdate = (newEducation) => {
    setResumeData({ ...resumeData, education: newEducation });
    onDataChange({ ...resumeData, education: newEducation });
  };

  const handleSkillsUpdate = (newSkills) => {
    setResumeData({ ...resumeData, skills: newSkills });
    onDataChange({ ...resumeData, skills: newSkills });
  };

  const handleProjectsUpdate = (newProjects) => {
    setResumeData({ ...resumeData, projects: newProjects });
    onDataChange({ ...resumeData, projects: newProjects });
  };

  const handleCertificatesUpdate = (newCertificates) => {
    setResumeData({ ...resumeData, certificates: newCertificates });
    onDataChange({ ...resumeData, certificates: newCertificates });
  };

  const handleLanguagesUpdate = (newLanguages) => {
    setResumeData({ ...resumeData, languages: newLanguages });
    onDataChange({ ...resumeData, languages: newLanguages });
  };

  return (
    <div className="Labels">
      <PersonalInfoForm onUpdate={handlePersonalInfoUpdate} />
      <ExperienceForm onUpdate={handleExperienceUpdate} />
      <EducationForm onUpdate={handleEducationUpdate} />
      <SkillsForm onUpdate={handleSkillsUpdate} />
      <ProjectsForm onUpdate={handleProjectsUpdate} />
      <CertificatesForm onUpdate={handleCertificatesUpdate} />
      <LanguagesForm onUpdate={handleLanguagesUpdate} />
    </div>
  );
};

export default ResumeForm;

----------------------------------------

components/ResumePreview.jsx:

// components/ResumePreview.jsx

import React from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEnvelope, faPhone, faMapMarker } from "@fortawesome/free-solid-svg-icons";


const ResumePreview = ({ data }) => {
  return (
    <div className="resume-container">
      <div className="header">
        <h1>{data.personalInfo?.fullName}</h1>
        <div className="sub-info">
        <FontAwesomeIcon icon={faEnvelope} className="text-gray-600 mr-1" />
          <p>{data.personalInfo?.email}</p>
          <span className="separator">|</span>
          <FontAwesomeIcon icon={faPhone} className="text-gray-600 mx-1" />
          <p>{data.personalInfo?.phoneNumber}</p>
          <span className="separator">|</span>
          {data.personalInfo?.location && (
            <>
                  <FontAwesomeIcon icon={faMapMarker} className="text-gray-600 mx-1" />
            <p>{data.personalInfo.location}</p>
            </>
          )}
     </div>
     </div>
     <hr /> 
      <div className="section">
        <h3>Experience</h3>
        <ul>
          {data.experience.map((exp, index) => (
            <li key={index}>
              <p>{exp.company}</p>
              <p>{exp.role}</p>
              <p>{exp.startDate} - {exp.endDate}</p>
              <p>{exp.description}</p>
            </li>
          ))}
        </ul>
      </div>

      <div className="section">
        <h3>Education</h3>
      </div>

      <div className="section">
        <h3>Skills</h3>
      </div>

      <div className="section">
        <h3>Projects</h3>
      </div>

      <div className="section">
        <h3>Certificates</h3>
      </div>

      <div className="section">
        <h3>Languages</h3>
      </div>
    </div>
  );
};

export default ResumePreview;

----------------------------------------

components/PersonalInfoForm.jsx:

// components/personalInfoForm.jsx

import React, { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faChevronDown,
  faChevronUp,
  faSave,
} from "@fortawesome/free-solid-svg-icons";

const PersonalInfoForm = ({ onUpdate }) => {
  const [personalInfo, setPersonalInfo] = useState({
    fullName: "", 
    email: "",
    phoneNumber: "",
    location: "", 
  });

  const [isFormVisible, setIsFormVisible] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    const savedData = localStorage.getItem("personalInfo");
    if (savedData) {
      setPersonalInfo(JSON.parse(savedData));
    }
  }, []);

  const toggleFormVisibility = () => {
    setIsFormVisible(!isFormVisible);
  };

  const handleChange = (event) => {
    const { name, value } = event.target;
    setPersonalInfo({ ...personalInfo, [name]: value });
    onUpdate({ ...personalInfo, [name]: value });
    setHasChanges(true);
  };

  const handleSave = () => {
    localStorage.setItem("personalInfo", JSON.stringify(personalInfo));
    setHasChanges(false);
  };

  return (
    <div>
      <div
        className={`title-button ${isFormVisible ? "expanded" : ""}`}
        onClick={toggleFormVisibility}
      >
        <h2>Personal Information</h2>
        <FontAwesomeIcon icon={isFormVisible ? faChevronUp : faChevronDown} />
      </div>
      {isFormVisible && (
        <div className="form-container">
          <form>
            <div className="form-field">
              <label>Full Name:</label>
              <input
                type="text"
                name="fullName"
                value={personalInfo.fullName}
                onChange={handleChange}
              />
            </div>
            <div className="form-field">
              <label>Email:</label>
              <input
                type="email"
                name="email"
                value={personalInfo.email}
                onChange={handleChange}
              />
            </div>
            <div className="form-field">
              <label>Phone:</label>
              <input
                type="tel"
                name="phoneNumber"
                value={personalInfo.phoneNumber}
                onChange={handleChange}
              />
            </div>
            <div className="form-field">
              <label>Location:</label>
              <input
                type="text"
                name="location"
                value={personalInfo.location}
                onChange={handleChange}
              />
            </div>

            <button
              type="button"
              onClick={handleSave}
              disabled={!hasChanges}
              className={hasChanges ? "" : "saved-button"}
            >
              {hasChanges ? (
                <>
                  <FontAwesomeIcon icon={faSave} /> Save
                </>
              ) : (
                "Saved"
              )}
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default PersonalInfoForm;

----------------------------------------

