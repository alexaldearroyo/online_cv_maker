App.js:

// import logo from './logo.svg';
import "./App.css";

import React, { useState } from "react";
import ResumeForm from "./components/ResumeForm";
import ResumePreview from "./components/ResumePreview";

function App() {
  const [resumeData, setResumeData] = useState({
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handleDataChange = (newData) => {
    setResumeData(newData);
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Online CV Maker</h1>
      </header>
      <div className="app-container">
      <div className="form-panel">
      <ResumeForm onDataChange={handleDataChange} />
      </div>
      <div className="preview-panel">
      <ResumePreview data={resumeData} />
      </div>
      </div>
    </div>
  );
}

export default App;

----------------------------------------

App.css:

.App {
  text-align: center;
  font-family: 'Arial', sans-serif;
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100%;
  flex-grow: 1;
  background: #D9D9D9;
  /* align-items: center;
  justify-content: center; */
}

.App-header {
  background-color: white;
  color: black;
  border-bottom: black 3px solid;
  padding: 20px 0;
  width: 100%;
  height: 5%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.App-header h1 {
  margin: 0;
  font-size: 1.5rem;
}

h2 {
  color: #333;
  font-size: 1.25rem;
  font-weight: normal;
  margin-bottom: 15px;
  cursor: pointer;
}

.app-container {
  background: #D9D9D9;
  display: flex;
  /* width: 100%; */
  align-items: stretch;
  justify-self: center;
  flex-wrap: wrap;
  flex-grow: 1;
  padding: 2rem;
  gap: 2rem;
}

.form-panel, .preview-panel {
  flex: 1;
  min-height: 80%;
  width: 90%;
  /* margin-left: 2rem; */
  /* margin-right: 2rem; */
  box-sizing: border-box;
  background-color: white;
  padding: 2rem;
  display: flex;
  border: 3px solid black;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 8px 0 rgba(30, 11, 11, 0.2);
}

.preview-panel {
  justify-content: flex-start;
}

.Labels {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.title-button {
  width: 90%;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 1rem;  
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  border: 1px solid black;
  padding: 0.75rem;
  border-radius: 4px;
  background-color: #f8f8f8;
  max-height: 20px;
  margin-top: 0;
}

.title-button:hover {
  background-color: #e9e9e9;
}

.title-button.expanded {
  border-bottom: 1px solid black;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  margin-bottom: 0;
}

.form-container {
  border: 1px solid black;
  border-radius: 4px;
  border-top: none;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  margin-top: 0;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
  background-color: #f8f8f8;
  padding: 0.75rem;
  display: block;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem;
  flex-grow: 0;
}

/* .form-field {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  margin-bottom: 10px;
  width: 100%;
  /* overflow: auto; */


.form-field label {
  flex-basis: 10%;
  margin-right: 10px;
  text-align: right;
  white-space: nowrap;
  max-width: 100%;
  margin: 150px;
}

textarea,
.form-field input[type="text"],
.form-field input[type="email"],
.form-field input[type="tel"],
.form-field input[type="date"]
{
  width: 90%;
  max-width: 400px;
  flex-grow: 0;
  font-size: 1rem;
  box-sizing: border-box;
  padding: 10px;
  margin: 5px 0;
  border: 1px solid black;
  border-radius: 4px;
}

textarea {
  resize: vertical;
}

.textarea-container {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  resize: vertical;
}

button {
  background-color: black;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

button:hover {
  background-color: rgb(33, 50, 136);
}

@media (max-width: 768px) {
  .App {
    height: 100%;
  }
  
  .app-container {
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    margin-bottom: 2rem;
  }

  .form-panel, .preview-panel {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
    flex-basis: auto;
    margin-bottom: 2rem;
  }
}

----------------------------------------

components/ResumeForm.jsx:

import React, { useState } from "react";

import PersonalInfoForm from "./PersonalInfoForm";
import ExperienceForm from "./ExperienceForm";
import EducationForm from "./EducationForm";
import SkillsForm from "./SkillsForm";
import ProjectsForm from "./ProjectsForm";
import CertificatesForm from "./CertificatesForm";
import LanguagesForm from "./LanguagesForm";

const ResumeForm = ({ onDataChange }) => {
  const [resumeData, setResumeData] = useState({
    personalInfo: {},
    experience: [],
    education: [],
    skills: [],
    projects: [],
    certificates: [],
    languages: [],
  });

  const handlePersonalInfoUpdate = (newPersonalInfo) => {
    setResumeData({ ...resumeData, personalInfo: newPersonalInfo });
    onDataChange({ ...resumeData, personalInfo: newPersonalInfo });
  };

  const handleExperienceUpdate = (newExperience) => {
    setResumeData({ ...resumeData, experience: newExperience });
    onDataChange({ ...resumeData, experience: newExperience });
  };

  const handleEducationUpdate = (newEducation) => {
    setResumeData({ ...resumeData, education: newEducation });
    onDataChange({ ...resumeData, education: newEducation });
  };

  const handleSkillsUpdate = (newSkills) => {
    setResumeData({ ...resumeData, skills: newSkills });
    onDataChange({ ...resumeData, skills: newSkills });
  };

  const handleProjectsUpdate = (newProjects) => {
    setResumeData({ ...resumeData, projects: newProjects });
    onDataChange({ ...resumeData, projects: newProjects });
  };

  const handleCertificatesUpdate = (newCertificates) => {
    setResumeData({ ...resumeData, certificates: newCertificates });
    onDataChange({ ...resumeData, certificates: newCertificates });
  };

  const handleLanguagesUpdate = (newLanguages) => {
    setResumeData({ ...resumeData, languages: newLanguages });
    onDataChange({ ...resumeData, languages: newLanguages });
  };

  return (
    <div className="Labels">
      <PersonalInfoForm onUpdate={handlePersonalInfoUpdate} />
      <ExperienceForm onUpdate={handleExperienceUpdate} />
      <EducationForm onUpdate={handleEducationUpdate} />
      <SkillsForm onUpdate={handleSkillsUpdate} />
      <ProjectsForm onUpdate={handleProjectsUpdate} />
      <CertificatesForm onUpdate={handleCertificatesUpdate} />
      <LanguagesForm onUpdate={handleLanguagesUpdate} />
    </div>
  );
};

export default ResumeForm;

----------------------------------------

components/ResumePreview.jsx:

import React from 'react';

const ResumePreview = ({ data }) => {
  return (
    <div>
        <h2>Resume Preview</h2>

        <div>
            <h3>Personal Information</h3>
            <p>Name: {data.personalInfo?.firstName} {data.personalInfo?.lastName}</p>
            <p>Email: {data.personalInfo?.email}</p>
            <p>Phone: {data.personalInfo?.phoneNumber}</p>
        </div>

        <div>
            <h3>Work Experience</h3>
            {data.experience?.map((exp, index) => (
                <div key={index}>
                    <p>{exp.position} at {exp.company}</p>
                    <p>From: {exp.startDate} To: {exp.endDate}</p>
                    <p>Description: {exp.description}</p>
                </div>
            ))}
        </div>

        <div>
            <h3>Education</h3>
            {data.education?.map((edu, index) => (
                <div key={index}>
                    <p>{edu.degree} at {edu.institution}</p>
                    <p>Year of completion: {edu.year}</p>
                </div>
            ))}
        </div>

        <div>
            <h3>Skills</h3>
            {data.skills?.map((skill, index) => (
                <div key={index}>
                    <p>{skill}</p>
                </div>
            ))}
        </div>

        <div>
            <h3>Projects</h3>
            {data.projects?.map((project, index) => (
                <div key={index}>
                    <p>{project.name}</p>
                    <p>Description: {project.description}</p>
                </div>
            ))}
        </div>

        <div>
            <h3>Certificates</h3>
            {data.certificates?.map((certificate, index) => (
                <div key={index}>
                    <p>{certificate.name}</p>
                    <p>From: {certificate.institution}</p>
                    <p>Year: {certificate.year}</p>
                </div>
            ))}
        </div>

        <div>
            <h3>Languages</h3>
            {data.languages?.map((language, index) => (
                <div key={index}>
                    <p>{language.name}</p>
                    <p>Level: {language.level}</p>
                </div>
            ))}
        </div>

    </div>
  );
};

export default ResumePreview;

----------------------------------------

components/ExperienceForm.jsx:

// components/ExperienceForm.jsx

import React, { useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faChevronDown, faChevronUp } from "@fortawesome/free-solid-svg-icons";

const ExperienceForm = ({ onUpdate }) => {
  const [experience, setExperience] = useState([
    {
      company: "",
      role: "",
      startDate: "",
      endDate: "",
      description: "",
    },
  ]);

  const handleAddExperience = () => {
    setExperience([...experience, {
      company: "",
      role: "",
      startDate: "",
      endDate: "",
      description: "",
    }]);
  };
  
  const handleDelete = (index) => {
    const updatedExperiences = [...experience];
    updatedExperiences.splice(index, 1);
    setExperience(updatedExperiences);
    onUpdate(updatedExperiences);

  };
  


  const [isFormVisible, setIsFormVisible] = useState(false);

  const toggleFormVisibility = () => {
    setIsFormVisible(!isFormVisible);
  };

  const handleChange = (event, index) => {
    const { name, value } = event.target;
    const updatedExperiences = [...experience];
    updatedExperiences[index] = { ...updatedExperiences[index], [name]: value };
    setExperience(updatedExperiences);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    onUpdate(experience);
    // setIsFormVisible(false);
  };

  return (
    <div>
      <div
        className={`title-button ${isFormVisible ? "expanded" : ""}`}
        onClick={toggleFormVisibility}
      >
        <h2>Experience</h2>
        <FontAwesomeIcon icon={isFormVisible ? faChevronUp : faChevronDown} />
      </div>
      {isFormVisible && (
        <div className="form-container">
        <form onSubmit={handleSubmit}>
          {experience.map((exp, index) => (
            <div key={index}>
              <div className="form-field">
                <label>Company Name:</label>
                <input
                  type="text"
                  name="company"
                  value={exp.company}
                  onChange={(e) => handleChange(e, index)}
                />
              </div>
              <div className="form-field">
                <label>Role:</label>
                <input
                  type="text"
                  name="role"
                  value={exp.role}
                  onChange={(e) => handleChange(e, index)}
                />
              </div>
              <div className="form-field">
                <label>Start Date:</label>
                <input
                  type="date"
                  name="startDate"
                  value={exp.startDate}
                  onChange={(e) => handleChange(e, index)}
                />
              </div>
              <div className="form-field">
                <label>End Date:</label>
                <input
                  type="date"
                  name="endDate"
                  value={exp.endDate}
                  onChange={(e) => handleChange(e, index)}
                />
              </div>
              <div className="form-field">
                <label>Description:</label>
                <div className="textarea-container">
                <textarea
                  name="description"
                  value={exp.description}
                  onChange={(e) => handleChange(e, index)}
                />
                </div>
              </div>
              <button type="button" onClick={() => handleDelete(index)}>
          Delete
        </button>
        <button type="button" onClick={handleAddExperience}>
      Add
    </button>
            </div>
          ))}

          <button type="submit">Submit</button>
        </form>
      </div>
      )}
    </div>
  );
};

export default ExperienceForm;

----------------------------------------

